<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>2</ID>
      <Description>"panning back"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
push #-134
push ebx
call 00511C40

exit:
jmp returnhere

43BA61:
jmp newmem
nop 3
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
43BA61:
db 6A 00 53 E8 D7 61 0D 00
//push 00
//push ebx
//call 00511C40
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"fix cursor prev"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
sub ecx,#162//19
mov [esi+08],ecx

exit:
jmp returnhere

4387FF:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
4387FF:
db 83 E9 19 89 4E 08
//sub ecx,19
//mov [esi+08],ecx
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"fix object highlight"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov ebx,[eax+000000E0]
sub ebx,#134


exit:
jmp returnhere

438DDA:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
438DDA:
db 8B 98 E0 00 00 00
//mov ebx,[eax+000000E0]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"fix shake"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
//add ebx,#110
push #138
xor ecx,ecx
mov ecx,4
mov [006FFFA8],ecx
//push ebx
push #134
mov eax,esi

exit:
jmp returnhere

415F13:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
415F13:
db 50 33 C9 53 8B C6
//push eax
//xor ecx,ecx
//push ebx
//mov eax,esi
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"fix shake finish"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov [ebp+30],#134//ebx
mov [ebp+34],ebx

exit:
jmp returnhere

415EE1:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
415EE1:
db 89 5D 30 89 5D 34
//mov [ebp+30],ebx
//mov [ebp+34],ebx
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"adjust board reload"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [006FFFB8],1
jne originalcode
mov [ebp+30],#134
mov [006FFFB8],0

originalcode:

mov edx,[ebp+0000013C]

exit:
jmp returnhere

415E04:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
415E04:
db 8B 95 3C 01 00 00
//mov edx,[ebp+0000013C]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>23</ID>
      <Description>"level name"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

0079552A: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
je 004181DB
//lea ebx,[ebp-02]
mov ebx,#766

exit:
jmp returnhere

4181D6:
jmp 0079552A
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
4181D6:
db 74 03 8D 5D FE
//je 004181DB
//lea ebx,[ebp-02]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>24</ID>
      <Description>"flash if ready"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
add edx,[edi+08]
push eax
mov eax,[6a9ec0]
mov eax,[eax+768]
cmp [eax+5568],#10
pop eax
jg end

sub edx,#134

end:
mov eax,[esi+00000820]

exit:
jmp returnhere

4871D0:
jmp newmem
nop 4
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
4871D0:
db 03 57 08 8B 86 20 08 00 00
//add edx,[edi+08]
//mov eax,[esi+00000820]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>25</ID>
      <Description>"dave pos"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushad
mov eax,[6a9ec0]
mov eax,[eax+768]
mov ebx,[eax+15C]
cmp [ebx+20],0
je end
mov [eax+30],#134



end:
popad

originalcode:
mov eax,ebp
call 0040EAB0

exit:
jmp returnhere

415D92:
jmp newmem
nop 2
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
415D92:
db 8B C5 E8 17 8D FF FF
//mov eax,ebp
//call 0040EAB0
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>30</ID>
      <Description>"Fix Stone Button"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov edi,[esi+08]

//cmp [esi+7C],0
//jne end
push eax
mov eax,[6a9ec0]
cmp [eax+7fC],3
pop eax
jne end


cmp byte ptr [esi+118],1
jne end
add edi,#134



end:
cmp edx,edi

exit:
jmp returnhere

448356:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
448356:
db 8B 7E 08 3B D7
//mov edi,[esi+08]
//cmp edx,edi
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"808"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>00417548</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>12</ID>
      <Description>"801"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>004175A0</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"797"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>004176A3</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"797"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>00417787</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"797"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>0041786B</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>15</ID>
      <Description>"797"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>00417942</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"788"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>417C49</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"798"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>4179AC</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"814"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>417A06</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>18</ID>
      <Description>"846"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>417BBB</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>19</ID>
      <Description>"800"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>4181C6</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>20</ID>
      <Description>"-100"</Description>
      <ShowAsSigned>1</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>41A2FE</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>21</ID>
      <Description>"-115"</Description>
      <ShowAsSigned>1</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>00430EAD</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>27</ID>
      <Description>"scripts"</Description>
      <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>28</ID>
          <Description>"fix minigame text"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

00794FD8: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
//fld dword ptr [00679B18]
fld dword ptr [fl]

exit:
jmp returnhere

fl:
dd (float)979

42F4BD:
jmp 00794FD8
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
42F4BD:
db D9 05 18 9B 67 00
//fld dword ptr [00679B18]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>29</ID>
          <Description>"fix minigame text"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

00794FE8: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
fmul qword ptr [00679300]
fadd qword ptr [fl]

exit:
jmp returnhere

fl:
dq (double)300

459334:
jmp 00794FE8
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
459334:
db DC 0D 00 93 67 00
//fmul qword ptr [00679300]
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of mov [esi+08],eax</Description>
      <AddressString>PlantsVsZombies.exe+6DD16</AddressString>
      <Before>
        <Byte>46</Byte>
        <Byte>38</Byte>
        <Byte>D8</Byte>
        <Byte>46</Byte>
        <Byte>34</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>46</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>B2</Byte>
        <Byte>BA</Byte>
        <Byte>1C</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [esi+0C],eax</Description>
      <AddressString>PlantsVsZombies.exe+6DD1E</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>B2</Byte>
        <Byte>BA</Byte>
        <Byte>1C</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>46</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>5F</Byte>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>08</Byte>
        <Byte>C3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov eax,[ecx+0000008C]</Description>
      <AddressString>PlantsVsZombies.exe+1C1C0</AddressString>
      <Before>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>81</Byte>
        <Byte>8C</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>80</Byte>
        <Byte>F8</Byte>
        <Byte>07</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov eax,[ecx+0000008C]</Description>
      <AddressString>PlantsVsZombies.exe+1C1C0</AddressString>
      <Before>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>81</Byte>
        <Byte>8C</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>80</Byte>
        <Byte>F8</Byte>
        <Byte>07</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
</CheatTable>
