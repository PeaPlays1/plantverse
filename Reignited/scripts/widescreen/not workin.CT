<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"SpawnZombie"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [ecx+7F8],0
jne originalcode
push eax
mov eax,[6a9ec0]
mov eax,[eax+768]
cmp [eax+5550],6
pop eax
jne originalcode

pushad
mov eax,5
call 5af400
push eax
push 0
mov eax,[6a9ec0]
mov eax,[eax+768]
call 40DDC0
mov [eax+34],(float)0

sub [eax+20],#1000




mov [eax+84],(float)700


push eax
mov eax,5
call 5af400
add eax,3
mov ebx,eax
pop eax

imul ebx,#80
add ebx,#20
cvtsi2ss xmm0,ebx
movss [eax+2C],xmm0


//mov [eax+2C],(float)320

mov [eax+11C],(float)0.001



mov esi,eax
mov eax,3
call 5af400
add eax,1
mov [00710200],al
mov byte ptr [esi+130],1
mov [esi+E8],#120

popad




push eax
mov eax,[6a9ec0]
mov eax,[eax+768]
cmp [eax+557C],4
pop eax
jl originalcode


pushad
mov eax,5
call 5af400
push eax
push 0
mov eax,[6a9ec0]
mov eax,[eax+768]
call 40DDC0
mov [eax+34],(float)0

sub [eax+20],#1000




mov [eax+84],(float)700


push eax
mov eax,5
call 5af400
add eax,3
mov ebx,eax
pop eax

imul ebx,#80
add ebx,#20
cvtsi2ss xmm0,ebx
movss [eax+2C],xmm0


//mov [eax+2C],(float)320

mov [eax+11C],(float)0.001



mov esi,eax
mov eax,3
call 5af400
add eax,1
mov [00710200],al
mov byte ptr [esi+130],1
mov [esi+E8],#120

popad


push eax
mov eax,[6a9ec0]
mov eax,[eax+768]
cmp [eax+557C],8
pop eax
jl originalcode


pushad
mov eax,5
call 5af400
push eax
push 0
mov eax,[6a9ec0]
mov eax,[eax+768]
call 40DDC0
mov [eax+34],(float)0

sub [eax+20],#1000




mov [eax+84],(float)700


push eax
mov eax,5
call 5af400
add eax,3
mov ebx,eax
pop eax

imul ebx,#80
add ebx,#20
cvtsi2ss xmm0,ebx
movss [eax+2C],xmm0


//mov [eax+2C],(float)320

mov [eax+11C],(float)0.001



mov esi,eax
mov eax,3
call 5af400
add eax,1
mov [00710200],al
mov byte ptr [esi+130],1
mov [esi+E8],#120

popad





originalcode:
mov eax,[esi]
mov eax,[eax+000007F8]

exit:
jmp returnhere




42692E:
jmp newmem
nop 3
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
42692E:
db 8B 06 8B 80 F8 07 00 00
//mov eax,[esi]
//mov eax,[eax+000007F8]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1</ID>
      <Description>"zombie stuns"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [esi+24],14
je continue
pushad
mov edi,[esi+0C]
mov eax,[esi+08]
mov ecx,[6a9ec0]
mov ecx,[ecx+768]
call 41C4C0
mov [esi+80],eax
add [esi+80],1
popad





continue:
cmp [esi+24],0
jne originalcode
cmp byte ptr [esi+130],1
jl originalcode
cmp [esi+84],0
jle squish
fld dword ptr [esi+120]
fsub qword ptr [fl]
fst dword ptr [esi+120]
fadd dword ptr [esi+84]
fstp dword ptr [esi+84]
mov [esi+34],(float)0
pushad
call 52F050
popad
jmp originalcode



squish:
mov [esi+84],0
pushad
push 1
push [esi+1C]
push [esi+80]
mov edi,esi
call 52E920
popad
cmp [esi+C8],#100
jg next
mov [esi+C8],#1000000
mov [esi+E8],#120






next:
cmp [esi+C8],#1000
jle originalcode
sub [esi+E8],2
cmp [esi+E8],0
jne originalcode
mov [esi+EC],1





/*mov [esi+EC],1
pushad
mov eax,25
mov ecx,[esi+20]
sub esp,08
fld dword ptr [esi+30]
fadd dword ptr [fl2]
fstp [esp+04]
fld dword ptr [esi+2C]
fadd dword ptr [fl2]
fstp [esp]
mov edx,[6a9ec0]
call 453C80
push (float)1.1
mov edx,eax
call 518630
popad

pushad
mov eax,00
mov ecx,[esi+20]
sub esp,08
fld dword ptr [esi+30]
fadd dword ptr [fl3]
fstp [esp+04]
fld dword ptr [esi+2C]
fadd dword ptr [fl3]
fstp [esp]
mov edx,[6a9ec0]
call 453C80
push (float)0.9
mov edx,eax
call 518630
popad

pushad
mov eax,31
mov ecx,[esi+20]
sub esp,08
fld dword ptr [esi+30]
fadd dword ptr [fl4]
fstp [esp+04]
fld dword ptr [esi+2C]
fadd dword ptr [fl2]
fstp [esp]
mov edx,[6a9ec0]
call 453C80
push (float)1.4
mov edx,eax
call 518630
popad*/




originalcode:
jmp 007946C2

exit:
jmp returnhere

fl:
dq (double)0.15

fl2:
dd (float)80

fl3:
dd (float)50

fl4:
dd (float)100

52B174:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
52B174:
db E9 49 95 26 00
//jmp 007946C2
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"draw iamage"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp byte ptr [ebx+130],1
jne next
/*pushad
sub esp,04
fld dword ptr [ebx+84]
fchs
fstp dword ptr [esp]
push (float)0
mov edx,[700268]
mov eax,ebp
call 587630
popad*/

cmp [ebx+E8],#120
jne next3
pushad
mov eax,[ebx+E8]
push eax
push #120

movss xmm0,[ebx+84]
cvttss2si eax,xmm0
neg eax


push eax
push 0
mov edi,[700268]
mov eax,ebp
call 587520
popad
jmp originalcode

next3:
pushad
mov eax,[ebx+E8]
//imul eax,2




push eax
push #120

mov eax,[ebx+E8]

neg eax
add eax,#120

push eax
push 0
mov edi,[700268]
mov eax,ebp
call 587520
popad



jmp originalcode


next:
cmp byte ptr [ebx+130],2
jne next1
pushad
sub esp,04
fld dword ptr [ebx+84]
fchs
fstp dword ptr [esp]
push (float)0
mov edx,[70026C]
mov eax,ebp
call 587630
popad
jmp originalcode

next1:
cmp byte ptr [ebx+130],3
jne originalcode
pushad
sub esp,04
fld dword ptr [ebx+84]
fchs
fstp dword ptr [esp]
push (float)0
mov edx,[700270]
mov eax,ebp
call 587630
popad
jmp originalcode


originalcode:
cmp dword ptr [ebx+000000B4],00

exit:
jmp returnhere

fl:
dd (float)300

52E336:
jmp newmem
nop 2
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
52E336:
cmp dword ptr [ebx+000000B4],00
//Alt: db 83 BB B4 00 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"no eat"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp byte ptr [ebp+130],1
jge 0052FDEE


originalcode:
cmp byte ptr [ebp+000000BF],00

exit:
jmp returnhere

52FB84:
jmp newmem
nop 2
returnhere:



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
52FB84:
cmp byte ptr [ebp+000000BF],00
//Alt: db 80 BD BF 00 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"no drop arm"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp byte ptr [ebx+130],1
jge 0052A45E

originalcode:
cmp esi,14
je 0052A45E

exit:
jmp returnhere

529F02:
jmp newmem
nop 4
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
529F02:
cmp esi,14
je 0052A45E
//Alt: db 83 FE 14 0F 84 53 05 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Auto Assemble script"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push eax
mov eax,[6a9ec0]
mov eax,[eax+768]
cmp [eax+5550],6
pop eax
jne originalcode
cmp ecx,#15
jl 004090D6
mov ecx,#15
jmp 004090D6


originalcode:
cmp ecx,0A
jl 004090D6

exit:
jmp returnhere

4090CC:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
4090CC:
cmp ecx,0A
jl 004090D6
//Alt: db 83 F9 0A 7C 05
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"Auto Assemble script"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push eax
mov eax,[6a9ec0]
mov eax,[eax+768]
cmp [eax+5550],6
pop eax
jne originalcode
cmp eax,#15
jl 0040907F
mov eax,#15
jmp 0040907F


originalcode:
cmp eax,0A
jl 0040907F

exit:
jmp returnhere

409075:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
409075:
cmp eax,0A
jl 0040907F
//Alt: db 83 F8 0A 7C 05
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>9</ID>
      <Description>"15"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>6A34FC</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>12</ID>
      <Description>"vault over bush"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushad
call iterateZombies
cmp al,1
popad
je 00525E7B
pushad
push (float)24
push 0
push 3
push str1
mov edi,esi
call 528B00
popad
mov [esi+28],#12
mov [esi+34],(float)0.5
mov byte ptr [esi+BC],0



originalcode:
push 02
push esi
call 0052E780

exit:
jmp returnhere

str1:
db 'anim_jump' 00

iterateZombies:
mov edi,esi
mov edx,[edi+04]
sub esp,0A
lea esi,[esp]
mov [esi],00
next5:
call 41C8F0//zombie
test al,al
je next2
mov ebx,[esi]
mov eax,[edi+1C]
cmp [ebx+1C],eax
jne next3
//cmp [ebx+24],0
//jne next3
//cmp byte ptr [ebx+130],1
//jl next3




pushad
lea ecx,dword ptr [ebx+8C]
//mov [007000D8],ecx
lea edi,dword ptr [edi+9C]
//mov [007000E8],edi
call 41C820
cmp eax,#20
popad
jg next3
/*pushad
push edi
mov [00700068],1
call 52E840
mov [00700068],0
cmp eax,0
popad
jz next3*/
jmp res2



next3:
jmp next5
next2:
add esp,0A
xor al,al
ret
res2:
add esp,A
mov al,1
ret

525DF2:
jmp newmem
nop 3
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
525DF2:
push 02
push esi
call 0052E780
//Alt: db 6A 02 56 E8 86 89 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>15</ID>
      <Description>"Auto Assemble script"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//cmp ecx,99
cmp [00700068],1
jne originalcode
push eax
mov eax,[ebx+08]
cmp [ebp+08],eax
pop eax
je 0052E8EF
jmp 0052E892

originalcode:
cmp al,[ebx+000000B8]

exit:
jmp returnhere

52E88A:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
52E88A:
cmp al,[ebx+000000B8]
//Alt: db 3A 83 B8 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"riseFromGrave()"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
fstp dword ptr [ebx+2C]

fld dword ptr [ebx+2C]
fistp dword ptr [ebx+08]


cmp [ebx+24],11
je diggerScenario
cmp [ebx+24],10
je balloon


pushad


push [ebx+1C]
mov ebx,ebx


mov edi,[ebx+0C]
mov eax,[ebx+08]
mov ecx,[6a9ec0]
mov ecx,[ecx+768]
call 41C4C0
add eax,1

call 531C90
popad
jmp originalcode






diggerScenario:
mov [ebx+2C],(float)900
jmp originalcode


balloon:

mov [ebx+84],(float)1000




originalcode:

pop ebx
ret 0008

exit:
jmp returnhere


42A206:
jmp newmem
nop 2
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
42A206:
db D9 5B 2C 5B C2 08 00
//fstp dword ptr [ebx+2C]
//pop ebx
//ret 0008
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of mov [esi+08],eax</Description>
      <AddressString>PlantsVsZombies.exe+6DD16</AddressString>
      <Before>
        <Byte>46</Byte>
        <Byte>38</Byte>
        <Byte>D8</Byte>
        <Byte>46</Byte>
        <Byte>34</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>46</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>B2</Byte>
        <Byte>BA</Byte>
        <Byte>1C</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [esi+0C],eax</Description>
      <AddressString>PlantsVsZombies.exe+6DD1E</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>B2</Byte>
        <Byte>BA</Byte>
        <Byte>1C</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>46</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>5F</Byte>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>08</Byte>
        <Byte>C3</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
</CheatTable>
