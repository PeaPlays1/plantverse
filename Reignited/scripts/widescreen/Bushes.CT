<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"No description"</Description>
      <ShowAsHex>1</ShowAsHex>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>69F2B8</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>1</ID>
      <Description>"init bushes"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

pushad
mov ecx,[700000]
mov eax,[6a9ec0]
call 453CB0
mov edx,eax
mov eax,[6a9ec0]
call 453CF0
popad
pushad
mov ecx,[700010]
mov eax,[6a9ec0]
call 453CB0
mov edx,eax
mov eax,[6a9ec0]
call 453CF0
popad
pushad
mov ecx,[700020]
mov eax,[6a9ec0]
call 453CB0
mov edx,eax
mov eax,[6a9ec0]
call 453CF0
popad
pushad
mov ecx,[700030]
mov eax,[6a9ec0]
call 453CB0
mov edx,eax
mov eax,[6a9ec0]
call 453CF0
popad
pushad
mov ecx,[700040]
mov eax,[6a9ec0]
call 453CB0
mov edx,eax
mov eax,[6a9ec0]
call 453CF0
popad










pushad
mov ebx,65
push #313000
push (float)0
push (float)675
mov eax,[6a9ec0]
call 453C30
mov [eax+8],(float)0
mov [eax+10],0
mov ebx,[eax+9C]


mov [00700000],ebx



popad
pushad
mov ebx,65
push #323000
push (float)100
push (float)675
mov eax,[6a9ec0]
call 453C30
mov [eax+8],(float)0
mov [eax+10],0


mov ebx,[eax+9C]
mov [00700010],ebx

popad
pushad
mov ebx,65
push #333000
push (float)200
push (float)675
mov eax,[6a9ec0]
call 453C30
mov [eax+8],(float)0
mov [eax+10],0

mov [eax+18],2

mov ebx,[eax+9C]
mov [00700020],ebx

popad

pushad
mov ebx,65
push #343000
push (float)300
push (float)675
mov eax,[6a9ec0]
call 453C30
mov [eax+8],(float)0
mov [eax+10],0


mov ebx,[eax+9C]
mov [00700030],ebx

popad

pushad
mov ebx,65
push #353000
push (float)400
push (float)675
mov eax,[6a9ec0]
call 453C30
mov [eax+8],(float)0
mov [eax+10],0


mov ebx,[eax+9C]
mov [00700040],ebx


popad


originalcode:
cmp dword ptr [edx+000007F8],1F

exit:
jmp returnhere

4084AC:
jmp newmem
nop 2
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
4084AC:
db 83 BA F8 07 00 00 1F
//cmp dword ptr [edx+000007F8],1F
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"shake bushes"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov eax,[ebp+0C]
mov [006FFFE8],eax


push eax
mov eax,[6a9ec0]
cmp [eax+7FC],3
pop eax
jne end

pushad
mov eax,[6a9ec0]
mov eax,[eax+768]
call reanim
popad

end:

push edx
push edi

exit:
jmp returnhere

track:
db 'anim_rustle' 00


val:
dd (float)100

val2:
dd (float)0


reanim:





sub esp,0A
lea esi,[esp]
mov [esi],00
next5:
mov eax,[6a9ec0]
mov eax,[eax+768]
add [700000],1
call 41CB90//zombie
test al,al
je next2
mov ebx,[esi]
cmp [ebx+0],65
jne next3

mov edx,[ebx+68]
sub edx,#303000
pushad
mov eax,edx
cdq
mov ecx,#10000
idiv ecx
sub eax,1
mov [6ffff8],eax
popad
mov edx,[6fffe8]
cmp [6ffff8],edx


jne next3

/*fld dword ptr [ebx+38]
fdiv dword ptr [val]
fistp dword ptr [val2]
mov edx,[6fffe8]
sub edx,1
cmp [val],edx
jne next3*/






mov [ebx+10],3
mov [ebx+8],(float)12
pushad
push track
mov ecx,ebx
call 473280
popad
jmp next3

next3:
jmp next5
next2:
add esp,0A
xor al,al
ret
res2:
add esp,A
mov al,1
ret

40DE18:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
40DE18:
db 8B 45 0C 52 57
//mov eax,[ebp+0C]
//push edx
//push edi
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of mov [esi+08],eax</Description>
      <AddressString>PlantsVsZombies.exe+6DD16</AddressString>
      <Before>
        <Byte>46</Byte>
        <Byte>38</Byte>
        <Byte>D8</Byte>
        <Byte>46</Byte>
        <Byte>34</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>46</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>B2</Byte>
        <Byte>BA</Byte>
        <Byte>1C</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [esi+0C],eax</Description>
      <AddressString>PlantsVsZombies.exe+6DD1E</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>B2</Byte>
        <Byte>BA</Byte>
        <Byte>1C</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>46</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>5F</Byte>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>08</Byte>
        <Byte>C3</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
</CheatTable>
