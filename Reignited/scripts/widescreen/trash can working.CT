<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"No description"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>Byte</VariableType>
      <Address>0079640B</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"module 3"</Description>
      <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>4</ID>
          <Description>"spawn zombie"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushad
call 007966E3
cmp eax,03
popad
jne originalcode
pushad
push 2
push 0
mov eax,[6a9ec0]
mov eax,[eax+768]
call 40DDC0

mov byte ptr [eax+130],1
mov [eax+2C],(float)580
mov [eax+C8],#1000000
mov [eax+E8],#150
mov [eax+E4],3

popad

originalcode:
mov [eax+00000348],000000FF

exit:
jmp returnhere

43A9A3:
jmp newmem
nop 5
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
43A9A3:
mov [eax+00000348],000000FF
//Alt: db C7 80 48 03 00 00 FF 00 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"update trash can"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushad
call 007966E3
cmp eax,03
popad
je 0052AECE

originalcode:
cmp dword ptr [esi+24],19
je 0052AECE

exit:
jmp returnhere

52AE7D:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
52AE7D:
cmp dword ptr [esi+24],19
je 0052AECE
//Alt: db 83 7E 24 19 74 4B
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"update script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushad
call 007966E3
cmp eax,03
popad
jne originalcode
cmp byte ptr [esi+130],1
jne zombifall

mov [esi+34],(float)0
pushad
call 52F050
popad

mov [esi+11C],(float)0.0001

pushad
mov eax,[6a9ec0]
mov eax,[eax+768]
mov ebx,[eax+5564]
cmp [eax+557C],ebx
popad
je originalcode


push eax
mov eax,[6a9ec0]
cmp [eax+7FC],3
pop eax
jne originalcode


cmp [esi+E4],1
je next
cmp [esi+E4],2
je next2
cmp [esi+E4],3
jge next3

sub [esi+E8],1
cmp [esi+E8],#100
jg originalcode
mov [esi+E4],1
//mov [esi+E8],#200
jmp originalcode

next:
add [esi+E8],4
cmp [esi+E8],#200
jl originalcode
mov [esi+E4],2

pushad
push 2
mov eax,[6a9ec0]
mov eax,[eax+768]
cmp [eax+557C],#16
jge cone
push 0
jmp cont1
cone:
push 2






cont1:
mov eax,[6a9ec0]
mov eax,[eax+768]
call 40DDC0
mov edx,[esi+2C]
mov [eax+2C],edx
mov [eax+84],(float)30
mov [eax+120],(float)12
mov byte ptr [eax+130],2

mov edi,eax

mov eax,5
call 5af400

mov [edi+1C],eax

mov edx,[edi+1C]
imul edx,edx,00002710
add edx,0004A768
mov [edi+20],edx

//mov [edi+EC],1


popad




jmp originalcode

next2:
//add [esi+E4],1
sub [esi+E8],5
cmp [esi+E8],#150
jg originalcode
mov [esi+E4],3
/*sub [esi+E8],1
cmp [esi+E8],#220
jl originalcode
mov [esi+E4],1
//mov [esi+E8],#220*/
jmp originalcode

next3:
add [esi+E4],1
cmp [esi+E4],#1000
jl originalcode
mov [esi+E4],0
//mov [esi+E8],1




zombifall:
cmp byte ptr [esi+130],2
jne originalcode
fld dword ptr [esi+120]
fsub qword ptr [fl]
fst dword ptr [esi+120]
fadd dword ptr [esi+84]
fstp dword ptr [esi+84]

cmp [esi+84],(float)0
jg originalcode
mov [esi+84],(float)0



originalcode:
jmp 00796704

exit:
jmp returnhere

fl:
dq (double)0.10

52B174:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
52B174:
jmp 00796704
//Alt: db E9 8B B5 26 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"draw iamage"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushad
call 007966E3
cmp eax,03
popad
jne originalcode
/*push eax
mov eax,[6a9ec0]
cmp [eax+7FC],3
pop eax
jne originalcode*/

cmp byte ptr [ebx+130],1
jne originalcode
cmp [ebx+E8],0
je originalcode

//cmp [ebx+E4],2
//jge next



pushad
push [ebx+E8]
//push #168
mov eax,#168
imul eax,#100
//idiv eax,2
cdq
mov ecx,[ebx+E8]
idiv ecx
//neg eax
//add eax,#168
push eax



mov eax,[ebx+E8]
neg eax
add eax,#110
push eax

/*mov eax,#168
imul eax,#100
cdq
mov ecx,[ebx+E8]
idiv ecx
*/
mov ecx,[ebx+E8]
mov eax,#168
sub eax,ecx
sar eax,1
neg eax
push eax


mov edi,[700274]
mov eax,ebp
call 587520
popad
jmp originalcode

next:

pushad
push -#60 //y offset
push #0 //x offset
mov ebx,[700274] //image address
mov eax,ebp //graphics pointer
call 587150 //call func
popad


//cmp [ebx+E8],#120
//jne next3
/*pushad
mov eax,[ebx+E8]
push eax
push #120

movss xmm0,[ebx+84]
cvttss2si eax,xmm0
neg eax


push eax
push 0
mov edi,[700268]
mov eax,ebp
call 587520
popad
jmp originalcode

next3:
pushad
mov eax,[ebx+E8]
//imul eax,2




push eax
push #120

mov eax,[ebx+E8]

neg eax
add eax,#120

push eax
push 0
mov edi,[700268]
mov eax,ebp
call 587520
popad



jmp originalcode


next:
cmp byte ptr [ebx+130],2
jne next1
pushad
sub esp,04
fld dword ptr [ebx+84]
fchs
fstp dword ptr [esp]
push (float)0
mov edx,[70026C]
mov eax,ebp
call 587630
popad
jmp originalcode

next1:
cmp byte ptr [ebx+130],3
jne originalcode
pushad
sub esp,04
fld dword ptr [ebx+84]
fchs
fstp dword ptr [esp]
push (float)0
mov edx,[700270]
mov eax,ebp
call 587630
popad
jmp originalcode*/


originalcode:
cmp dword ptr [ebx+000000B4],00

exit:
jmp returnhere

fl:
dd (float)300

52E336:
jmp newmem
nop 2
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
52E336:
cmp dword ptr [ebx+000000B4],00
//Alt: db 83 BB B4 00 00 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8</ID>
          <Description>"no eat"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushad
call 007966E3
cmp eax,03
popad
jne originalcode
cmp byte ptr [ebp+130],1
je 0052FDEE


originalcode:
jmp 007968B9

exit:
jmp returnhere

52FB84:
jmp newmem
nop 2
returnhere:



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
52FB84:
cmp byte ptr [ebp+000000BF],00
//Alt: db 80 BD BF 00 00 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10</ID>
          <Description>"no targetting"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushad
call 007966E3
cmp eax,03
popad
jne originalcode
cmp byte ptr [esi+130],1
je 00531AB6

originalcode:
cmp byte ptr [esi+000000EC],00

exit:
jmp returnhere

531A8E:
jmp newmem
nop 2
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
531A8E:
cmp byte ptr [esi+000000EC],00
//Alt: db 80 BE EC 00 00 00 00
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"70"</Description>
      <ShowAsHex>1</ShowAsHex>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>Byte</VariableType>
      <Address>00412D75</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>12</ID>
      <Description>"Auto Assemble script"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov [edi+00005614],00000064

mov [edi+00005574],000000C8


exit:
jmp returnhere

4130AA:
jmp newmem
nop 5
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
4130AA:
mov [edi+00005614],00000064
//Alt: db C7 87 14 56 00 00 64 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"EB"</Description>
      <ShowAsHex>1</ShowAsHex>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>Byte</VariableType>
      <Address>00413083</Address>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
