from PIL import Image

# === Font Data ===
CharList = (
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
    'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
    'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
    'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', '`',
    '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '=', '+', '[', '{',
    ']', '}', ';', ':',"'", '"', ',', '<', '.', '>', '/', '?', '¡', '¢', '£', '¥',
    '§', '©', '®', '¿', 'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É', 'Ê', 'Ë',
    'Ì', 'Í', 'Î', 'Ï', 'Ð', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù', 'Ú', 'Û', 'Ü',
    'Ý', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í',
    'î', 'ï', 'ð', 'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ÿ'
)

WidthList = (
    17,16,15,18,16,16,16,18,9,15,18,13,22,17,16,17,17,17,15,19,18,18,26,21,21,17,15,15,14,16,15,13,
    16,16,8,11,17,9,24,16,15,16,15,13,13,14,17,18,24,19,20,15,16,10,16,16,18,16,17,17,16,17,16,8,
    8,25,17,14,22,10,20,13,10,10,12,31,14,13,11,14,11,13,7,7,6,11,7,13,7,14,18,16,8,13,17,21,
    20,12,12,16,17,17,17,17,17,17,23,19,16,16,16,16,9,9,9,9,15,17,16,16,16,16,16,20,18,18,18,18,
    15,19,15,15,15,15,15,15,22,15,15,15,15,15,10,8,8,11,15,16,15,15,15,15,15,15,17,17,17,17,15,20
)

RectList = (
    (0,0,28,54),(29,0,27,54),(57,0,26,54),(84,0,28,54),(113,0,26,54),(140,0,26,54),(167,0,26,54),(194,0,28,54),
    (223,0,20,54),(244,0,25,54),(270,0,28,54),(299,0,24,54),(324,0,33,54),(358,0,28,54),(387,0,26,54),(414,0,28,54),
    (443,0,27,54),(471,0,28,54),(500,0,26,54),(527,0,29,54),(557,0,28,54),(586,0,29,54),(616,0,36,54),(653,0,32,54),
    (686,0,32,54),(719,0,28,54),(748,0,25,54),(774,0,25,54),(800,0,24,54),(825,0,26,54),(852,0,25,54),(878,0,23,54),
    (902,0,26,54),(929,0,26,54),(956,0,18,54),(975,0,24,54),(1000,0,27,54),(1028,0,19,54),(1048,0,35,54),(1084,0,27,54),
    (1112,0,25,54),(1138,0,26,54),(1165,0,26,54),(1192,0,23,54),(1216,0,24,54),(1241,0,25,54),(1267,0,27,54),(1295,0,28,54),
    (1324,0,34,54),(1359,0,29,54),(1389,0,30,54),(1420,0,25,54),(1446,0,27,54),(1474,0,21,54),(1496,0,27,54),(1524,0,26,54),
    (1551,0,30,54),(1582,0,26,54),(1609,0,27,54),(1637,0,28,54),(1666,0,27,54),(1694,0,27,54),(1722,0,26,54),(1749,0,19,54),
    (1769,0,19,54),(1789,0,35,54),(1825,0,29,54),(1855,0,24,54),(1880,0,33,54),(1914,0,20,54),(1935,0,30,54),(1966,0,23,54),
    (1990,0,21,54),(2012,0,20,54),(2033,0,23,54),(2057,0,42,54),(2100,0,24,54),(2125,0,23,54),(2149,0,21,54),(2171,0,24,54),
    (2196,0,21,54),(2218,0,23,54),(2242,0,17,54),(2260,0,19,54),(2280,0,17,54),(2298,0,21,54),(2320,0,18,54),(2339,0,24,54),
    (2364,0,17,54),(2382,0,24,54),(2407,0,28,54),(2436,0,27,54),(2464,0,19,54),(2484,0,23,54),(2508,0,28,54),(2537,0,40,54),
    (2578,0,30,54),(2609,0,22,54),(2632,0,22,54),(2655,0,27,54),(2683,0,28,54),(2712,0,28,54),(2741,0,28,54),(2770,0,28,54),
    (2799,0,28,54),(2828,0,28,54),(2857,0,34,54),(2892,0,29,54),(2922,0,26,54),(2949,0,26,54),(2976,0,26,54),(3003,0,26,54),
    (3030,0,21,54),(3052,0,20,54),(3073,0,20,54),(3094,0,23,54),(3118,0,23,54),(3142,0,28,54),(3171,0,26,54),(3198,0,26,54),
    (3225,0,26,54),(3252,0,26,54),(3279,0,26,54),(3306,0,31,54),(3338,0,28,54),(3367,0,28,54),(3396,0,28,54),(3425,0,28,54),
    (3454,0,23,54),(3478,0,29,54),(3508,0,25,54),(3534,0,25,54),(3560,0,25,54),(3586,0,26,54),(3613,0,25,54),(3639,0,25,54),
    (3665,0,32,54),(3698,0,27,54),(3726,0,25,54),(3752,0,25,54),(3778,0,25,54),(3804,0,25,54),(3830,0,21,54),(3852,0,19,54),
    (3872,0,20,54),(3893,0,24,54),(3918,0,23,54),(3942,0,27,54),(3970,0,25,54),(3996,0,25,54),(4022,0,25,54),(4048,0,26,54),
    (4075,0,25,54),(4101,0,26,54),(4128,0,27,54),(4156,0,27,54),(4184,0,27,54),(4212,0,27,54),(4240,0,23,54),(4264,0,30,54)
)

OffsetList = (
    (-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),
    (-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-6,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),
    (-5,0),(-5,0),(-5,0),(-8,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),
    (-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-6,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),
    (-5,0),(-5,0),(-6,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-6,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),
    (-5,0),(-5,0),(-5,0),(-6,0),(-6,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-10,0),
    (-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),
    (-6,0),(-5,0),(-5,0),(-7,0),(-4,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),
    (-4,0),(-5,0),(-5,0),(-5,0),(-5,0),(-6,0),(-5,0),(-5,0),(-5,0),(-6,0),(-5,0),(-5,0),(-5,0),(-5,0),(-6,0),(-5,0),
    (-6,0),(-7,0),(-4,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-5,0),(-4,0),(-5,0)
)

SPACE_WIDTH = 9
ASCENT = 41
LINE_SPACING = 0
POINT_SIZE = 28

# === Load Font Image ===
font_image = Image.open("HouseOfTerror28.png").convert("RGBA")

# Create a dictionary for quick character lookup
char_data = {c: (rect, width, offset) for c, rect, width, offset in zip(CharList, RectList, WidthList, OffsetList)}

# === Input Text ===
text = input("Enter text: ")

x_cursor = 0
x_positions = []
y_positions = []

for c in text:
    if c == ' ':
        x_start = x_cursor
        x_end = x_cursor + SPACE_WIDTH
        x_positions.append((x_start, x_end))
        y_positions.append((0, ASCENT))
        x_cursor += SPACE_WIDTH
        continue
    if c not in char_data:
        x_start = x_cursor
        x_end = x_cursor + SPACE_WIDTH
        x_positions.append((x_start, x_end))
        y_positions.append((0, ASCENT))
        x_cursor += SPACE_WIDTH
        continue
    rect, w, (ox, oy) = char_data[c]
    x_start = x_cursor + ox
    x_end = x_start + rect[2]
    y_start = oy
    y_end = oy + rect[3]
    x_positions.append((x_start, x_end))
    y_positions.append((y_start, y_end))
    x_cursor += w

# Canvas dimensions
x_min = min(start for start, _ in x_positions)
x_max = max(end for _, end in x_positions)
y_min = min(start for start, _ in y_positions)
y_max = max(end for _, end in y_positions)

width = x_max - x_min
height = y_max - y_min

# === Create canvas ===
output = Image.new("RGBA", (width, height), (0,0,0,0))

x_cursor = 0
output_pixels = output.load()  # canvas

for c in text:
    if c == ' ':
        x_cursor += SPACE_WIDTH
        continue
    if c not in char_data:
        x_cursor += SPACE_WIDTH
        continue

    rect, w, (ox, oy) = char_data[c]
    char_img = font_image.crop((rect[0], rect[1], rect[0]+rect[2], rect[1]+rect[3]))
    glyph_pixels = char_img.load()

    x_pos = x_cursor + ox - x_min
    y_pos = oy - y_min

    for y in range(char_img.height):
        for x in range(char_img.width):
            gx, gy, gz, ga = glyph_pixels[x, y]  # RGBA
            if ga == 0:
                continue  # fully transparent, skip

            x_out = x_pos + x
            y_out = y_pos + y

        # Compute brightness
            brightness = (gx + gy + gz) / 3

            if brightness > 256:  # light pixels = white/gray text
                output_pixels[x_out, y_out] = (255, 0, 0, ga)  # make red
            else:
                output_pixels[x_out, y_out] = (gx, gy, gz, ga)  # keep original (black) pixels

            ox, oy, oz, oa = output_pixels[x_pos + x, y_pos + y]
            # Max compositing: keep max of each channel
            new_pixel = (
                max(gx, ox),
                max(gy, oy),
                max(gz, oz),
                max(ga, oa)
            )
            output_pixels[x_pos + x, y_pos + y] = new_pixel

    x_cursor += w

# Save or show output
output.show()
